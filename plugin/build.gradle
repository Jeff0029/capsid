plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    // https://docs.gradle.org/current/userguide/java_gradle_plugin.html
    id 'java-gradle-plugin'

    // Provides the ability to publish build artifacts to an Apache Maven repository.
    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id 'maven-publish'
}

version '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.1'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.1'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:30.1-jre'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
    compileOnly 'org.jetbrains:annotations:20.1.0'
}

gradlePlugin {
    //noinspection GroovyAssignabilityCheck
    plugins {
        capsid {
            id = 'io.pzstorm.capsid'
            implementationClass = 'io.pzstorm.capsid.CapsidPlugin'
        }
    }
}

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest, sourceSets.integrationTest)
configurations {
    functionalTestImplementation.extendsFrom(implementation, testImplementation)
    integrationTestImplementation.extendsFrom(implementation, testImplementation)
}

// Register tasks to run functional and integration tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}
tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named('check') {
    // Run functional and integration tests as part of `check`
    it.dependsOn(tasks.functionalTest, tasks.integrationTest)
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
